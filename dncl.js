/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var dncl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,10,22,23,24,25,26,27,30,32,34,54,55,56,58,60,62,63,64,65,66,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109],$V1=[1,56],$V2=[1,57],$V3=[1,58],$V4=[1,59],$V5=[1,60],$V6=[1,61],$V7=[1,62],$V8=[1,26],$V9=[1,63],$Va=[1,64],$Vb=[1,55],$Vc=[1,21],$Vd=[1,54],$Ve=[1,51],$Vf=[1,52],$Vg=[1,53],$Vh=[1,22],$Vi=[1,23],$Vj=[1,24],$Vk=[1,25],$Vl=[1,50],$Vm=[1,49],$Vn=[1,29],$Vo=[1,30],$Vp=[1,31],$Vq=[1,32],$Vr=[1,33],$Vs=[1,34],$Vt=[1,35],$Vu=[1,36],$Vv=[1,37],$Vw=[1,38],$Vx=[1,39],$Vy=[1,40],$Vz=[1,41],$VA=[1,42],$VB=[1,43],$VC=[1,44],$VD=[1,45],$VE=[1,46],$VF=[1,47],$VG=[1,48],$VH=[5,10,22,23,24,25,26,27,30,32,34,54,55,56,57,58,59,60,62,63,64,65,66,68,69,70,75,78,79,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109],$VI=[1,66],$VJ=[1,67],$VK=[2,29],$VL=[1,72],$VM=[4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,61,81,83,84,106],$VN=[2,25],$VO=[1,81],$VP=[1,82],$VQ=[1,83],$VR=[1,84],$VS=[1,85],$VT=[1,86],$VU=[1,87],$VV=[1,88],$VW=[1,89],$VX=[1,90],$VY=[1,91],$VZ=[1,92],$V_=[1,93],$V$=[1,94],$V01=[1,95],$V11=[1,96],$V21=[1,119],$V31=[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,31,33,36,54,61,67,70,71,72,73,77,80,81,82,83,84,86,106],$V41=[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,31,33,36,54,61,67,71,72,73,77,80,81,83,84,106],$V51=[31,36],$V61=[2,38],$V71=[1,132],$V81=[36,54],$V91=[11,36],$Va1=[2,40],$Vb1=[1,189],$Vc1=[11,31,33,36],$Vd1=[5,10,22,23,24,25,26,27,30,32,34,54,55,56,58,60,62,63,64,65,66,75,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],$Ve1=[4,5,11,12,13,14,15,16,17,18,19,20,21,31,33,36,54,61,67,71,72,73,77,80,81,83,84,106],$Vf1=[11,18,19,20,21,31,33,36,54,61,67,71,72,73,77,80,81,83,84,106],$Vg1=[2,24];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"e":3,"+":4,"-":5,"*":6,"/":7,"÷":8,"%":9,"(":10,")":11,"=":12,"!=":13,">":14,"<":15,">=":16,"<=":17,"かつ":18,"または":19,"でない":20,"と":21,"整数値":22,"実数値":23,"文字列値":24,"TRUE":25,"FALSE":26,"IDENTIFIER":27,"args":28,"variable":29,"[":30,"]":31,"{":32,"}":33,"UNDEFINED":34,"variablelist":35,"COMMA":36,"statementlist":37,"statement":38,"EmptyStatement":39,"DefineStatement":40,"CallStatement":41,"AssignStatement":42,"PrintStatement":43,"InputStatement":44,"GraphicStatement":45,"ForStatement":46,"WhileStatement":47,"LoopStatement":48,"IfStatement":49,"SleepStatement":50,"DefineFuncStatement":51,"ReturnStatement":52,"DumpStatement":53,"NEWLINE":54,"変数を確認する":55,"手続き":56,"手続き終了":57,"関数":58,"関数終了":59,"手続きを抜ける":60,"を返す":61,"整数":62,"実数":63,"文字列":64,"真偽":65,"もし":66,"ならば":67,"を実行する":68,"を実行し，そうでなければ":69,"を":70,"から":71,"まで":72,"ずつ":73,"増やしながら，":74,"を繰り返す":75,"減らしながら，":76,"FOR2":77,"繰り返し，":78,"を，":79,"になるまで実行する":80,"の間，":81,"←":82,"を改行無しで表示する":83,"を表示する":84,"改行する":85,"を入力する":86,"gOpenWindow":87,"gCloseWindow":88,"gClearWindow":89,"gSetLineColor":90,"gSetFillColor":91,"gSetLineWidth":92,"gSetFontSize":93,"gDrawText":94,"gDrawLine":95,"gDrawBox":96,"gFillBox":97,"gDrawCircle":98,"gFillCircle":99,"gSetTextColor":100,"gDrawPoint":101,"gDrawOval":102,"gFillOval":103,"gDrawArc":104,"gFillArc":105,"ミリ秒待つ":106,"Program":107,"SourceElements":108,"EOF":109,"SourceElement":110,"$accept":0,"$end":1},
terminals_: {2:"error",4:"+",5:"-",6:"*",7:"/",8:"÷",9:"%",10:"(",11:")",12:"=",13:"!=",14:">",15:"<",16:">=",17:"<=",18:"かつ",19:"または",20:"でない",21:"と",22:"整数値",23:"実数値",24:"文字列値",25:"TRUE",26:"FALSE",27:"IDENTIFIER",30:"[",31:"]",32:"{",33:"}",34:"UNDEFINED",36:"COMMA",54:"NEWLINE",55:"変数を確認する",56:"手続き",57:"手続き終了",58:"関数",59:"関数終了",60:"手続きを抜ける",61:"を返す",62:"整数",63:"実数",64:"文字列",65:"真偽",66:"もし",67:"ならば",68:"を実行する",69:"を実行し，そうでなければ",70:"を",71:"から",72:"まで",73:"ずつ",74:"増やしながら，",75:"を繰り返す",76:"減らしながら，",77:"FOR2",78:"繰り返し，",79:"を，",80:"になるまで実行する",81:"の間，",82:"←",83:"を改行無しで表示する",84:"を表示する",85:"改行する",86:"を入力する",87:"gOpenWindow",88:"gCloseWindow",89:"gClearWindow",90:"gSetLineColor",91:"gSetFillColor",92:"gSetLineWidth",93:"gSetFontSize",94:"gDrawText",95:"gDrawLine",96:"gDrawBox",97:"gFillBox",98:"gDrawCircle",99:"gFillCircle",100:"gSetTextColor",101:"gDrawPoint",102:"gDrawOval",103:"gFillOval",104:"gDrawArc",105:"gFillArc",106:"ミリ秒待つ",109:"EOF"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,1],[3,3],[3,3],[29,4],[29,1],[29,1],[35,6],[35,3],[35,4],[35,1],[35,1],[28,3],[28,1],[28,0],[37,2],[37,0],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[39,1],[53,2],[53,4],[51,9],[51,9],[52,2],[52,3],[40,3],[40,3],[40,3],[40,3],[41,5],[49,7],[49,10],[46,13],[46,13],[46,11],[46,11],[48,7],[48,7],[47,6],[42,4],[43,3],[43,3],[43,2],[44,3],[45,7],[45,4],[45,4],[45,9],[45,9],[45,5],[45,5],[45,9],[45,11],[45,11],[45,11],[45,9],[45,9],[45,9],[45,7],[45,11],[45,11],[45,17],[45,17],[50,3],[107,2],[108,2],[108,0],[110,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Add($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 2:
this.$ = new Sub($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 3:
this.$ = new Mul($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 4:
this.$ = new Div($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 5:
this.$ = new Div2($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 6:
this.$ = new Mod($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 7:
 this.$ = new Minus($$[$0], new Location(_$[$0], _$[$0]));
break;
case 8:
this.$ = $$[$0-1];
break;
case 9:
this.$ = new EQ($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 10:
this.$ = new NE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 11:
this.$ = new GT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 12:
this.$ = new LT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 13:
this.$ = new GE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 14:
this.$ = new LE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 15:
this.$ = new And($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 16:
this.$ = new Or($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 17:
this.$ = new Not($$[$0-1], new Location(_$[$0-1], _$[$0-1]));
break;
case 18:
this.$ = new Append($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 19:
this.$ = new IntValue(Number(toHalf(yytext,_$[$0])), new Location(_$[$0],_$[$0]));
break;
case 20:
this.$ = new FloatValue(Number(toHalf(yytext,_$[$0])), new Location(_$[$0],_$[$0]));
break;
case 21:
this.$ = new StringValue(yytext.substring(1, yytext.length - 1), new Location(_$[$0], _$[$0]));
break;
case 22:
this.$ = new BooleanValue(true, new Location(_$[$0],_$[$0]));
break;
case 23:
this.$ = new BooleanValue(false, new Location(_$[$0],_$[$0]));
break;
case 24:
this.$ = new CallFunction($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 25:
this.$ = $$[$0];
break;
case 26: case 27:
this.$ = new ArrayValue($$[$0-1], new Location(_$[$0-2], _$[$0]));
break;
case 28:
this.$ = new Variable(toHalf($$[$0-3], _$[$0-3]), new ArrayValue($$[$0-1]), new Location(_$[$0-3],_$[$0-3]));
break;
case 29:
this.$ = new Variable(toHalf($$[$0], _$[$0]), null, new Location(_$[$0], _$[$0]));
break;
case 30:
this.$ = new UNDEFINED(yytext, new Location(_$[$0],_$[$0]));
break;
case 31:
this.$ = $$[$0-5].concat({varname:toHalf($$[$0-3], _$[$0-5]), parameter:new ArrayValue($$[$0-1], new Location(_$[$0-1],_$[$0-1]))});
break;
case 32:
this.$ = $$[$0-2].concat({varname:toHalf($$[$0], _$[$0-2])});
break;
case 33:
this.$ = [{varname:toHalf($$[$0-3], _$[$0-3]), parameter:new ArrayValue($$[$0-1], new Location(_$[$0-1],_$[$0-1]))}];
break;
case 34:
this.$ = [{varname:toHalf($$[$0], _$[$0])}];
break;
case 35:
this.$ = [new UNDEFINED(yytext, new Location(_$[$0],_$[$0]))];
break;
case 36:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 37:
 this.$ = [$$[$0]];
break;
case 38: case 104:
 this.$ = [];
break;
case 39:
 if($$[$0] != null) this.$ = $$[$0-1].concat($$[$0]);
break;
case 40:
this.$ = [];
break;
case 56:
this.$ = null;
break;
case 57:
this.$ = new DumpStatement(new Location(_$[$0-1], _$[$0-1]));
break;
case 58:
this.$ = new DumpStatement(new Location(_$[$0-3], _$[$0-3]));
break;
case 59:
this.$ = new DefineStep($$[$0-7], $$[$0-5], $$[$0-2], new Location(_$[$0-8], _$[$0-1]));
break;
case 60:
this.$ = new DefineFunction($$[$0-7], $$[$0-5], $$[$0-2], new Location(_$[$0-8], _$[$0-1]));
break;
case 61:
this.$ = new ExitStatement(new Location(_$[$0-1],_$[$0-1]));
break;
case 62:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new ReturnStatement($$[$0-2], new Location(_$[$0-2], _$[$0-1]))];
break;
case 63:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionInt($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 64:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionFloat($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 65:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionString($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 66:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionBoolean($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 67:
this.$ = [new runBeforeGetValue($$[$0-2], _$[$0-4]), new CallStep($$[$0-4], $$[$0-2], new Location(_$[$0-4],_$[$0-1]))];
break;
case 68:
this.$ = [new runBeforeGetValue([$$[$0-5]], _$[$0-6]), new If($$[$0-5],$$[$0-2],null, new Location(_$[$0-6], _$[$0-1]))];
break;
case 69:
this.$ = [new runBeforeGetValue([$$[$0-8]], _$[$0-9]), new If($$[$0-8],$$[$0-5],$$[$0-2], new Location(_$[$0-9], _$[$0-1]))];
break;
case 70:
this.$ = [new runBeforeGetValue([$$[$0-10]], _$[$0-10]), new ForInc($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]))];
break;
case 71:
this.$ = [new runBeforeGetValue([$$[$0-10]], _$[$0-10]), new ForDec($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]))];
break;
case 72:
this.$ = [new runBeforeGetValue([$$[$0-8]], _$[$0-8]), new ForInc($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]))];
break;
case 73:
this.$ = [new runBeforeGetValue([$$[$0-8]], _$[$0-8]), new ForDec($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]))];
break;
case 74: case 75:
this.$ = new Until($$[$0-4], $$[$0-2], new Location(_$[$0-6], _$[$0-1]));
break;
case 76:
this.$ = new While($$[$0-5], $$[$0-2], new Location(_$[$0-5], _$[$0-1]));
break;
case 77:
this.$ = [new runArgsBeforeGetValue([$$[$0-3]], _$[$0-3]), new runBeforeGetValue([$$[$0-1]], _$[$0-3]), new Assign($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-1]))];
break;
case 78:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new Output($$[$0-2], false, new Location(_$[$0-2],_$[$0-1]))];
break;
case 79:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new Output($$[$0-2], true, new Location(_$[$0-2],_$[$0-1]))];
break;
case 80:
this.$ = new Newline(new Location(_$[$0-1], _$[$0-1]));
break;
case 81:
this.$ = [new runArgsBeforeGetValue([$$[$0-2]], _$[$0-2]), new Input($$[$0-2], new Location(_$[$0-2], _$[$0-1]))];
break;
case 82:
this.$ = [new runBeforeGetValue([$$[$0-4],$$[$0-2]], _$[$0-6]), new GraphicStatement('gOpenWindow', [$$[$0-4],$$[$0-2]], new Location(_$[$0-6], _$[$0-6]))];
break;
case 83:
this.$ = new GraphicStatement('gCloseWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 84:
this.$ = new GraphicStatement('gClearWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 85:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetLineColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]))];
break;
case 86:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetFillColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]))];
break;
case 87:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-4]), new GraphicStatement('gSetLineWidth', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]))];
break;
case 88:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-4]), new GraphicStatement('gSetFontSize', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]))];
break;
case 89:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gDrawText', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 90:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawLine', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 91:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 92:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gFillBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 93:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gDrawCircle', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 94:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gFillCircle', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 95:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetTextColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 96:
this.$ = [new runBeforeGetValue([$$[$0-4],$$[$0-2]], _$[$0-6]), new GraphicStatement('gDrawPoint', [$$[$0-4],$$[$0-2]], new Location(_$[$0-6],_$[$0-6]))];
break;
case 97:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawOval', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 98:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gFillOval', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 99:
this.$ = [new runBeforeGetValue([$$[$0-14],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-16]), new GraphicStatement('gDrawArc', [$$[$0-14],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-16],_$[$0-16]))];
break;
case 100:
this.$ = [new runBeforeGetValue([$$[$0-14],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-16]), new GraphicStatement('gFillArc', [$$[$0-14],$$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-16],_$[$0-16]))];
break;
case 101:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new SleepStatement($$[$0-2], new Location(_$[$0-2], _$[$0-2]))];
break;
case 102:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
	          return $$[$0-1]; 
break;
case 103:
 this.$ = $$[$0-1].concat($$[$0]);
break;
}
},
table: [o($V0,[2,104],{107:1,108:2}),{1:[3]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:5,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,109:[1,3],110:4},{1:[2,102]},o($V0,[2,103]),o($V0,[2,105]),o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),o($VH,[2,56]),{27:$VI,34:$VJ,35:65},{27:$VI,34:$VJ,35:68},{27:$VI,34:$VJ,35:69},{27:$VI,34:$VJ,35:70},o([4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,61,70,81,82,83,84,86,106],$VK,{10:[1,71],30:$VL}),o($VM,$VN,{70:[1,75],82:[1,73],86:[1,74]}),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,61:[1,80],81:[1,78],83:[1,76],84:[1,77],106:[1,79]},{54:[1,97]},{10:[1,98]},{10:[1,99]},{10:[1,100]},{10:[1,101]},{10:[1,102]},{10:[1,103]},{10:[1,104]},{10:[1,105]},{10:[1,106]},{10:[1,107]},{10:[1,108]},{10:[1,109]},{10:[1,110]},{10:[1,111]},{10:[1,112]},{10:[1,113]},{10:[1,114]},{10:[1,115]},{10:[1,116]},{54:[1,117]},{3:118,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{27:[1,121]},{27:[1,122]},{54:[1,123]},{10:[1,125],54:[1,124]},o($V31,[2,30]),{3:126,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:127,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($V41,[2,19]),o($V41,[2,20]),o($V41,[2,21]),o($V41,[2,22]),o($V41,[2,23]),o($V51,$V61,{29:120,28:128,3:129,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),o([33,36],$V61,{29:120,3:129,28:130,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),{36:$V71,54:[1,131]},o($V81,[2,34],{30:[1,133]}),o($V81,[2,35]),{36:$V71,54:[1,134]},{36:$V71,54:[1,135]},{36:$V71,54:[1,136]},o($V91,$V61,{29:120,3:129,28:137,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),o($V51,$V61,{29:120,3:129,28:138,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),{3:139,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{54:[1,140]},{3:141,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{54:[1,142]},{54:[1,143]},{54:[1,144]},{54:[1,145]},{54:[1,146]},{3:147,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:148,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:149,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:150,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:151,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:152,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:153,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:154,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:155,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:156,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:157,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:158,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:159,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:160,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($V41,[2,17]),{3:161,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($VH,[2,80]),{3:162,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{11:[1,163]},{11:[1,164]},{3:165,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:166,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:167,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:168,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:169,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:170,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:171,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:172,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:173,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:174,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:175,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:176,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:177,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:178,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:179,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:180,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o([5,10,22,23,24,25,26,27,30,32,34,54,55,56,58,60,62,63,64,65,66,70,78,79,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],$Va1,{37:181}),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,67:[1,182]},o($V41,$VK,{10:[1,183],30:$VL}),o($V41,$VN),{10:[1,184]},{10:[1,185]},o($VH,[2,61]),o($VH,[2,57]),{11:[1,186]},o($V41,[2,7]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,187],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{31:[1,188],36:$Vb1},o($Vc1,[2,37],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11}),{33:[1,190],36:$Vb1},o($VH,[2,63]),{27:[1,191]},o($V51,$V61,{29:120,3:129,28:192,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),o($VH,[2,64]),o($VH,[2,65]),o($VH,[2,66]),{11:[1,193],36:$Vb1},{31:[1,194],36:$Vb1},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,54:[1,195]},o($VH,[2,81]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,71:[1,196],77:[1,197]},o($VH,[2,78]),o($VH,[2,79]),o($Vd1,$Va1,{37:198}),o($VH,[2,101]),o($VH,[2,62]),o($Ve1,[2,1],{6:$VQ,7:$VR,8:$VS,9:$VT}),o($Ve1,[2,2],{6:$VQ,7:$VR,8:$VS,9:$VT}),o($V41,[2,3]),o($V41,[2,4]),o($V41,[2,5]),o($V41,[2,6]),o($Vf1,[2,9],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT}),o($Vf1,[2,10],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT}),o($Vf1,[2,11],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT}),o($Vf1,[2,12],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT}),o($Vf1,[2,13],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT}),o($Vf1,[2,14],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT}),o($Vf1,[2,15],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ}),o($Vf1,[2,16],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ}),o([11,21,31,33,36,54,61,67,71,72,73,77,80,81,83,84,106],[2,18],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01}),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,199]},{54:[1,200]},{54:[1,201]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,202]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,203]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,204],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,205],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,206]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,207]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,208]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,209]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,210]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,211]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,212]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,213]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,214]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,215]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,216]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,217]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,70:[1,219],78:$Vm,79:[1,218],85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{54:[1,221]},o($V91,$V61,{29:120,3:129,28:222,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),o($V91,$V61,{29:120,3:129,28:223,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),o($V91,$V61,{29:120,3:129,28:224,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),{54:[1,225]},o($V41,[2,8]),o($V41,[2,26]),{3:226,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($V41,[2,27]),o($V81,[2,32],{30:[1,227]}),{31:[1,228],36:$Vb1},o($VM,$Vg1,{54:[1,229]}),o($V31,[2,28]),o($VH,[2,77]),{3:230,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:231,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,75:[1,232],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{3:233,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($VH,[2,83]),o($VH,[2,84]),{3:234,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:235,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{54:[1,236]},{54:[1,237]},{3:238,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:239,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:240,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:241,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:242,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:243,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:244,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:245,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:246,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:247,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:248,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:249,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:250,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:251,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o([5,10,22,23,24,25,26,27,30,32,34,54,55,56,57,58,59,60,62,63,64,65,66,68,69,70,75,78,79,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],[2,39]),o([5,10,22,23,24,25,26,27,30,32,34,54,55,56,58,60,62,63,64,65,66,68,69,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],$Va1,{37:252}),{11:[1,253],36:$Vb1},{11:[1,254],36:$Vb1},{11:[1,255],36:$Vb1},o($VH,[2,58]),o($Vc1,[2,36],{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11}),o($V51,$V61,{29:120,3:129,28:256,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,30:$V9,32:$Va,34:$Vb}),o($V81,[2,33]),o($VH,[2,67]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,72:[1,257]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,72:[1,258]},{54:[1,259]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,260],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,261]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,262]},o($VH,[2,87]),o($VH,[2,88]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,263]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,264]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,265]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,266]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,267]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,268]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,269]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,270],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,271]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,272]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,273]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,274]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,80:[1,275]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,80:[1,276]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,68:[1,277],69:[1,278],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($V41,$Vg1),{54:[1,279]},{54:[1,280]},{31:[1,281],36:$Vb1},{3:282,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb,74:[1,283]},{76:[1,284]},o($VH,[2,76]),{54:[1,285]},{3:286,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:287,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:288,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:289,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:290,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:291,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:292,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:293,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:294,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{54:[1,295]},{3:296,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:297,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:298,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:299,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{54:[1,300]},{54:[1,301]},{54:[1,302]},{54:[1,303]},o([5,10,22,23,24,25,26,27,30,32,34,54,55,56,57,58,60,62,63,64,65,66,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],$Va1,{37:304}),o([5,10,22,23,24,25,26,27,30,32,34,54,55,56,58,59,60,62,63,64,65,66,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],$Va1,{37:305}),o($V81,[2,31]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,73:[1,306]},{54:[1,307]},{54:[1,308]},o($VH,[2,82]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,309],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,310],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,311],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,312]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,313]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,314]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,315],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,316],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,317],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},o($VH,[2,96]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,318]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,319]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,320]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,321]},o($VH,[2,74]),o($VH,[2,75]),o($VH,[2,68]),o([5,10,22,23,24,25,26,27,30,32,34,54,55,56,58,60,62,63,64,65,66,68,78,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],$Va1,{37:322}),{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,57:[1,323],58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,59:[1,324],60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{74:[1,325],76:[1,326]},o($Vd1,$Va1,{37:327}),o($Vd1,$Va1,{37:328}),{54:[1,329]},{54:[1,330]},{54:[1,331]},{3:332,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:333,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:334,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{54:[1,335]},{54:[1,336]},{54:[1,337]},{3:338,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:339,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:340,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:341,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,68:[1,342],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{54:[1,343]},{54:[1,344]},{54:[1,345]},{54:[1,346]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,75:[1,347],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,75:[1,348],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($VH,[2,85]),o($VH,[2,86]),o($VH,[2,89]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,349],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,350],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,351],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},o($VH,[2,93]),o($VH,[2,94]),o($VH,[2,95]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,352],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,353],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,354]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,355]},{54:[1,356]},o($VH,[2,59]),o($VH,[2,60]),o($Vd1,$Va1,{37:357}),o($Vd1,$Va1,{37:358}),{54:[1,359]},{54:[1,360]},{54:[1,361]},{54:[1,362]},{54:[1,363]},{54:[1,364]},{54:[1,365]},{3:366,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:367,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($VH,[2,69]),{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,75:[1,368],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,29:27,30:$V9,32:$Va,34:$Vb,38:220,39:6,40:7,41:8,42:9,43:10,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,54:$Vc,55:$Vd,56:$Ve,58:$Vf,60:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,75:[1,369],78:$Vm,85:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($VH,[2,72]),o($VH,[2,73]),o($VH,[2,90]),o($VH,[2,91]),o($VH,[2,92]),o($VH,[2,97]),o($VH,[2,98]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,370]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,371]},{54:[1,372]},{54:[1,373]},{3:374,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:375,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},o($VH,[2,70]),o($VH,[2,71]),{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,376]},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11,36:[1,377]},{3:378,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{3:379,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V21,29:120,30:$V9,32:$Va,34:$Vb},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,380],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{4:$VO,5:$VP,6:$VQ,7:$VR,8:$VS,9:$VT,11:[1,381],12:$VU,13:$VV,14:$VW,15:$VX,16:$VY,17:$VZ,18:$V_,19:$V$,20:$V01,21:$V11},{54:[1,382]},{54:[1,383]},o($VH,[2,99]),o($VH,[2,100])],
defaultActions: {3:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = (yylineno + 1) + '行目に構文エラー:\n' + lexer.showPosition() + '\n\'' + (this.terminals_[symbol] || symbol) + '\'の近く（★のあたり）がおかしい';
                } else {
                    errStr = (yylineno + 1) + '行目に構文エラー: 予期しなかった' + (symbol == EOF ? 'プログラムの終わり' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function toHalf(s, token)
	{
		if(setting.zenkaku_mode == 1)
		{
			if(/[Ａ-Ｚａ-ｚ０-９．−]/.exec(s))
				throw {message:token.first_line + "行目に全角文字が間違って使われています"};
		}
		return s.replace(/[Ａ-Ｚａ-ｚ０-９．−]/g, function(s) {
			return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);}
		);
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
//        return pre + this.upcomingInput() + "\n" + c + "^";
        return pre + '★' + this.upcomingInput() + '...\n';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError((this.yylineno + 1) + '行目にエラー。\n★の近くに不明なテキスト。\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 65;
break;
case 1:return 25;
break;
case 2:return 25;
break;
case 3:return 25;
break;
case 4:return 26;
break;
case 5:return 26;
break;
case 6:return 26;
break;
case 7:return 24;
break;
case 8:return 23;
break;
case 9:return 22;
break;
case 10:return 36;
break;
case 11:return 34;
break;
case 12:return 4;
break;
case 13:return 4;
break;
case 14:return 5;
break;
case 15:return 5;
break;
case 16:return 5;
break;
case 17:return 6;
break;
case 18:return 6;
break;
case 19:return 6;
break;
case 20:return 7;
break;
case 21:return 7;
break;
case 22:return 8;
break;
case 23:return 9;
break;
case 24:return 9;
break;
case 25:return 10;
break;
case 26:return 11;
break;
case 27:return 10;
break;
case 28:return 11;
break;
case 29:return 30;
break;
case 30:return 31;
break;
case 31:return 30;
break;
case 32:return 31;
break;
case 33:return 32;
break;
case 34:return 33;
break;
case 35:return 32;
break;
case 36:return 33;
break;
case 37:return 16;
break;
case 38:return 17;
break;
case 39:return 16;
break;
case 40:return 17;
break;
case 41:return 16;
break;
case 42:return 17;
break;
case 43:return 14;
break;
case 44:return 15;
break;
case 45:return 14;
break;
case 46:return 15;
break;
case 47:return 12;
break;
case 48:return 12;
break;
case 49:return 13;
break;
case 50:return 13;
break;
case 51:return 13;
break;
case 52:return 82;
break;
case 53:return 18;
break;
case 54:return 19;
break;
case 55:return 20;
break;
case 56:return 84;
break;
case 57:return 83;
break;
case 58:return 83;
break;
case 59:return 86;
break;
case 60:return 66;
break;
case 61:return 67;
break;
case 62:return 69;
break;
case 63:return 68;
break;
case 64:return 68;
break;
case 65:return 81;
break;
case 66:return 81;
break;
case 67:return '繰り返しを抜ける';
break;
case 68:return '繰り返しを抜ける';
break;
case 69:return '繰り返しを抜ける';
break;
case 70:return 78;
break;
case 71:return 78;
break;
case 72:return 78;
break;
case 73:return 78;
break;
case 74:return 78;
break;
case 75:return 78;
break;
case 76:return 79;
break;
case 77:return 80;
break;
case 78:return 80;
break;
case 79:return 75;
break;
case 80:return 75;
break;
case 81:return 75;
break;
case 82:return 60;
break;
case 83:return 57;
break;
case 84:return 57;
break;
case 85:return 56;
break;
case 86:return 59;
break;
case 87:return 59;
break;
case 88:return 58;
break;
case 89:return 61;
break;
case 90:return 70;
break;
case 91:return 71;
break;
case 92:return 72;
break;
case 93:return 73;
break;
case 94:return 74;
break;
case 95:return 76;
break;
case 96:return 74;
break;
case 97:return 76;
break;
case 98:return 74;
break;
case 99:return 76;
break;
case 100:return 74;
break;
case 101:return 76;
break;
case 102:return 62;
break;
case 103:return 63;
break;
case 104:return 64;
break;
case 105:return 21;
break;
case 106:return 21;
break;
case 107:return 87;
break;
case 108:return 87;
break;
case 109:return 88;
break;
case 110:return 88;
break;
case 111:return 89;
break;
case 112:return 89;
break;
case 113:return 90;
break;
case 114:return 90;
break;
case 115:return 91;
break;
case 116:return 91;
break;
case 117:return 100;
break;
case 118:return 100;
break;
case 119:return 92;
break;
case 120:return 92;
break;
case 121:return 93;
break;
case 122:return 93;
break;
case 123:return 101;
break;
case 124:return 101;
break;
case 125:return 94;
break;
case 126:return 94;
break;
case 127:return 95;
break;
case 128:return 95;
break;
case 129:return 96;
break;
case 130:return 96;
break;
case 131:return 97;
break;
case 132:return 97;
break;
case 133:return 98;
break;
case 134:return 98;
break;
case 135:return 99;
break;
case 136:return 99;
break;
case 137:return 102;
break;
case 138:return 102;
break;
case 139:return 103;
break;
case 140:return 103;
break;
case 141:return 104;
break;
case 142:return 104;
break;
case 143:return 105;
break;
case 144:return 105;
break;
case 145:return 106;
break;
case 146:return 55;
break;
case 147:return 85;
break;
case 148:return 27;
break;
case 149:return 109;
break;
case 150:return 54;
break;
case 151:/* skip whitespace */
break;
}
},
rules: [/^(?:真偽)/,/^(?:true\b)/,/^(?:TRUE\b)/,/^(?:真)/,/^(?:false\b)/,/^(?:FALSE\b)/,/^(?:偽)/,/^(?:(「[^」]*」|｢[^｣]*｣|"[^"]*"))/,/^(?:(([0０]|(([1-9１-９])([0-9０-９])*))[.．]([0-9０-９])+))/,/^(?:([0０]|(([1-9１-９])([0-9０-９])*)))/,/^(?:([，,、]))/,/^(?:(《[^》]*》))/,/^(?:\+)/,/^(?:＋)/,/^(?:-)/,/^(?:ー)/,/^(?:−)/,/^(?:\*)/,/^(?:＊)/,/^(?:✕)/,/^(?:\/)/,/^(?:／)/,/^(?:÷)/,/^(?:%)/,/^(?:％)/,/^(?:\()/,/^(?:\))/,/^(?:（)/,/^(?:）)/,/^(?:\[)/,/^(?:\])/,/^(?:［)/,/^(?:］)/,/^(?:\{)/,/^(?:\})/,/^(?:｛)/,/^(?:｝)/,/^(?:>=)/,/^(?:<=)/,/^(?:≧)/,/^(?:≦)/,/^(?:＞＝)/,/^(?:＜＝)/,/^(?:>)/,/^(?:<)/,/^(?:＞)/,/^(?:＜)/,/^(?:=)/,/^(?:＝)/,/^(?:!=)/,/^(?:≠)/,/^(?:！＝)/,/^(?:←)/,/^(?:かつ)/,/^(?:または)/,/^(?:でない)/,/^(?:を(表示|印刷|出力)する)/,/^(?:を改行無しで(表示|印刷|出力)する)/,/^(?:を改行なしで(表示|印刷|出力)する)/,/^(?:を入力する)/,/^(?:もし)/,/^(?:ならば)/,/^(?:を実行し([，,、])そうでなければ)/,/^(?:を実行する)/,/^(?:を実行)/,/^(?:の間([，,、]))/,/^(?:の間)/,/^(?:繰り返しを抜ける)/,/^(?:繰返しを抜ける)/,/^(?:くりかえしを抜ける)/,/^(?:繰り返し([，,、]))/,/^(?:繰返し([，,、]))/,/^(?:くりかえし([，,、]))/,/^(?:繰り返し)/,/^(?:繰返し)/,/^(?:くりかえし)/,/^(?:を([，,、]))/,/^(?:になるまで実行する)/,/^(?:になるまで実行)/,/^(?:を繰り返す)/,/^(?:を繰返す)/,/^(?:をくりかえす)/,/^(?:手続きを抜ける)/,/^(?:手続き終了)/,/^(?:手続き終わり)/,/^(?:手続き)/,/^(?:関数終了)/,/^(?:関数終わり)/,/^(?:関数)/,/^(?:を返す)/,/^(?:を)/,/^(?:から)/,/^(?:まで)/,/^(?:ずつ)/,/^(?:増やしながら([，,、]))/,/^(?:減らしながら([，,、]))/,/^(?:増やしつつ([，,、]))/,/^(?:減らしつつ([，,、]))/,/^(?:増やしながら)/,/^(?:減らしながら)/,/^(?:増やしつつ)/,/^(?:減らしつつ)/,/^(?:整数)/,/^(?:実数)/,/^(?:文字列)/,/^(?:と([，,、]))/,/^(?:と)/,/^(?:描画領域開く)/,/^(?:gOpenWindow\b)/,/^(?:描画領域閉じる)/,/^(?:gCloseWindow\b)/,/^(?:描画領域全消去)/,/^(?:gClearWindow\b)/,/^(?:線色設定)/,/^(?:gSetLineColor\b)/,/^(?:塗色設定)/,/^(?:gSetFillColor\b)/,/^(?:文字色設定)/,/^(?:gSetTextColor\b)/,/^(?:線太さ設定)/,/^(?:gSetLineWidth\b)/,/^(?:文字サイズ設定)/,/^(?:gSetFontSize\b)/,/^(?:点描画)/,/^(?:gDrawPoint\b)/,/^(?:文字描画)/,/^(?:gDrawText\b)/,/^(?:線描画)/,/^(?:gDrawLine\b)/,/^(?:矩形描画)/,/^(?:gDrawBox\b)/,/^(?:矩形塗描画)/,/^(?:gFillBox\b)/,/^(?:円描画)/,/^(?:gDrawCircle\b)/,/^(?:円塗描画)/,/^(?:gFillCircle\b)/,/^(?:楕円描画)/,/^(?:gDrawOval\b)/,/^(?:楕円塗描画)/,/^(?:gFillOval\b)/,/^(?:弧描画)/,/^(?:gDrawArc\b)/,/^(?:弧塗描画)/,/^(?:gFillArc\b)/,/^(?:ミリ秒待つ)/,/^(?:変数を確認する)/,/^(?:改行する)/,/^(?:(([a-zA-Zａ-ｚＡ-Ｚ])([a-zA-Z0-9ａ-ｚＡ-Ｚ０-９])*))/,/^(?:$)/,/^(?:(\r\n|\r|\n))/,/^(?:([\s\t 　|｜]))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = dncl;
exports.Parser = dncl.Parser;
exports.parse = function () { return dncl.parse.apply(dncl, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}